rules{
  first_player : 0
  width : 10
  height : 10
  coloring : alternate
  player_change : explicit {
    (e) => e
  }
}

pieces{
  p1 {
    moves{
      vertical(2, 3)
      x : 1, x : 0, kills : true
    }
    can_jump : true
    on_end_reached : explicit{(e) => 2}
  }
  p2 {
    moves{
      vertical(2, 3)
      x : 1, x : 0, kills : true
    }
    can_jump : true
    on_end_reached : spawn(p1, p2)
  }
}

initial_piece_position{
  p {
    positions{
      x : 0, y: 0
      x : 1, y: 5
      x : 7, y: [1, 2]
      x : 8, y: 9
      x : 9, y: 6
    }
    mirrored : true
    owner : 1
  }
  p {
    positions{
      x : 9, y: 6,
      explicit{let a = 2}
    }
    mirrored : true
    owner : 1
  }
}

invariants{
  cant_risk(king)
  protect_piece(king)
  pawn_movement(pawn)
  explicit{
    (context, current_x, current_y, target_x, target_y) => {
      //returns bool representing movements that are allowed or not
    }
  }
}

finish{
  no_moves_available
  explicit{
    (context, current_x, current_y, target_x, target_y) => {
      //returns bool representing movements that are allowed or not
    }
  }
}
