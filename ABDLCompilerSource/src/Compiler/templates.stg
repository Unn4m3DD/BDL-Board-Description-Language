program(functs, stat) ::= <<
import ABDLVar from "./AbdlVar"
const sleep = (milliseconds) => {
  return new Promise(resolve => setTimeout(resolve, milliseconds))
}
const range = (a, b) => {
  const result = [];
  for (let i = a; i \<= b; i++) result.push(i);
  return result;
}
const move = (origin, destination, table) => {
  try {
    table[origin.getValue()[0]][origin.getValue()[1]].onclick();
    render(context, table)
    table[destination.getValue()[0]][destination.getValue()[1]].onclick();
    render(context, table)
    await sleep(1000);
    return new ABDLVar(1);
  } catch (e) {
    return new ABDLVar(0);
  }
}
const can_move = (origin, destination, table) => {
  if (!table[origin.getValue()[0]][origin.getValue()[1]]) return new ABDLVar(0);
  table[origin.getValue()[0]][origin.getValue()[1]].onclick();
  render(context, table)
  if (!!table[destination.getValue()[0]][destination.getValue()[1]].onclick)
    return new ABDLVar(1);
  else
    return new ABDLVar(0);
}
export default async (context, table) => {
  <statements(stat)>
}
<statements(functs)>
>>

decl(var,val) ::= "let <var> = <val>;"

statements(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

conditional(var,stat_true,stat_false) ::= <<
if (<var>.not_equal(0)) {
   <statements(stat_true)>
}<if(stat_false)>
else {
   <statements(stat_false)>
}<endif>
>>

tryCatch(stat) ::= <<
try{
    <statements(stat)>
} catch(e) {}
>>

move(e1, e2) ::= <<
  move(<e1>, <e2>, table);
>>

function(funcName, arg, stat) ::= <<
function <funcName>(<args(arg)>){
    <statements(stat)>
}
>>

args(arg) ::= <<
<if(arg)><arg; separator=", "><endif>
>>

whileStat(var, stat) ::= <<
while (<var>.not_equal(0)) {
    <statements(stat)>
}
>>

forStat(var, low, high, stat) ::= <<
for(let <var> of range(<low>,<high>)) {
    <statements(stat)>
}
>>