program(functs, stat, onMoveStat) ::= <<
import ABDLVar from "./AbdlVar.js"
var context;
var table;
var render;
const sleep = (milliseconds) => {
  return new Promise(resolve => setTimeout(resolve, milliseconds))
}
const range = (a, b) => {
  const result = [];
  for (let i = a.getValue(); i \<= b.getValue(); i++) result.push(new ABDLVar(i));
  return result;
}
const getName = (a) => {
  try{
    return new ABDLVar(context.board[a.getValue()[0]][a.getValue()[1]].piece.name)
  } catch(e){
    return new ABDLVar("");
  }
}
const getOwner = (a) => {
  try{
    return new ABDLVar(context.board[a.getValue()[0]][a.getValue()[1]].piece.owner)
  } catch(e){
    return new ABDLVar(0);
  }
}
const move = async (origin, destination) => {
  try {
    table[origin.getValue()[0]][origin.getValue()[1]].onclick();
    render(context, table)
    await sleep(1000);
    table[destination.getValue()[0]][destination.getValue()[1]].onclick();
    render(context, table)
    return new ABDLVar(1);
  } catch (e) {
    return new ABDLVar(0);
  }
}
const can_move = (origin, destination) => {
  if (!table[origin.getValue()[0]][origin.getValue()[1]].onclick) return new ABDLVar(0);
  table[origin.getValue()[0]][origin.getValue()[1]].onclick();
  render(context, table)
  try{
    if (!!table[destination.getValue()[0]][destination.getValue()[1]].onclick)
      return new ABDLVar(1);
    else
      return new ABDLVar(0);
  } catch(e){ return new ABDLVar(0) }
}
export default {
  <if(onMoveStat)>on_move: async (arg_context, arg_table, arg_render) => {
    <statements(onMoveStat)>
  },
  <endif>
  main: async (arg_context, arg_table, arg_render) => {
    context = arg_context;
    table = arg_table;
    render = arg_render;
    <statements(stat)>
  }
}
<statements(functs)>
>>

decl(var,val) ::= "let <var> = <val>;"

statements(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

conditional(var,stat_true,stat_false) ::= <<
if (<var>.getValue() != 0) {
   <statements(stat_true)>
}<if(stat_false)>
else {
   <statements(stat_false)>
}<endif>
>>

tryCatch(stat) ::= <<
try{
    <statements(stat)>
} catch(e) {}
>>

canMove(e1, e2) ::= <<
can_move(<e1>, <e2>);
>>

move(e1, e2) ::= <<
await move(<e1>, <e2>);
>>

function(funcName, arg, stat) ::= <<
async function <funcName>(<args(arg)>){
  <statements(stat)>
}
>>

args(arg) ::= <<
<if(arg)><arg; separator=", "><endif>
>>

whileStat(var, stat) ::= <<
while (<var>.getValue() != 0) {
  <statements(stat)>
}
>>

forStat(var, low, high, stat) ::= <<
for(let <var> of range(<low>,<high>)) {
  <statements(stat)>
}
>>