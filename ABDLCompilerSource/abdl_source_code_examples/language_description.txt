globally defined vars:
current_player = {0, 1} //current player, either 0 or 1
width, height
board[x, y] //set of pieces in board
board[x, y] == {
  piece_name: ,
  owner:
}
can_move([x_prev, y_prev], [x_next, y_next]) // returns 1 or 0
move([x_prev, y_prev], [x_next, y_next]) // returns 1 or 0 (success or failure)
print(expr); //return void

Types (todos os tipos são deduzidos da declaraçao let):
  int     -> 1 (tambem serve para condicionais, tipo C)
  string  -> 'asd' | "asd"
  point   -> [1, 3]
All types can be null

Operations:
  int op int -> + - * / %
  int op string -> + (concat) * (mult, "a" * 3 == "aaa") comutativa
  int op point -> + - * / % (operaçao ponto a ponto, a op [b, c] = [a op b, b op c], comutativa)
  string op string -> + (concat)
  point op point -> [a, b] op [x, y] == [a op x, b op y]


Semi Extensive:
  int + int       ->  int
  int + string    ->  string
  int + point     ->  point
  string + int    ->  string
  string + string ->  string
  string + point  ->  string
  point + int     ->  point
  point + string  ->  string
  point + point   ->  point

  int - int       ->  int
  int - string    ->  undefined
  int - point     ->  point
  string - int    ->  undefined
  string - string ->  undefined
  string - point  ->  undefined
  point - int     ->  point
  point - string  ->  undefined
  point - point   ->  point

  int * int       ->  int
  int * string    ->  string
  int * point     ->  point
  string * int    ->  string
  string * string ->  undefined
  string * point  ->  undefined
  point * int     ->  point
  point * string  ->  undefined
  point * point   ->  point

  int / int       ->  int
  int / string    ->  undefined
  int / point     ->  point
  string / int    ->  undefined
  string / string ->  undefined
  string / point  ->  undefined
  point / int     ->  point
  point / string  ->  undefined
  point / point   ->  point

  int % int       ->  int
  int % string    ->  undefined
  int % point     ->  point
  string % int    ->  undefined
  string % string ->  undefined
  string % point  ->  undefined
  point % int     ->  point
  point % string  ->  undefined
  point % point   ->  point

  int (== | !=) int       ->  int
  int (== | !=) string    ->  undefined
  int (== | !=) point     ->  undefined
  string (== | !=) int    ->  undefined
  string (== | !=) string ->  int
  string (== | !=) point  ->  undefined
  point (== | !=) int     ->  undefined
  point (== | !=) string  ->  undefined
  point (== | !=) point   ->  int

  int (< | <= | > | >=) int       ->  int
  int (< | <= | > | >=) string    ->  undefined
  int (< | <= | > | >=) point     ->  undefined
  string (< | <= | > | >=) int    ->  undefined
  string (< | <= | > | >=) string ->  undefined
  string (< | <= | > | >=) point  ->  undefined
  point (< | <= | > | >=) int     ->  undefined
  point (< | <= | > | >=) string  ->  undefined
  point (< | <= | > | >=) point   ->  undefined

